axis.text.x = element_text(angle = 45, hjust=1)) +
scale_x_discrete(labels = gsub("_", " ", match_order))
plotper = ggplot(m_sample_status_p_melted, aes(match_status, sample_id)) +
geom_tile(aes(fill = cut(value, breaks=seq(-0.1, 1, by = 0.1), labels=seq(0.0, 1, by = 0.1))), colour = "white") +
scale_fill_manual(drop=FALSE, values=colorRampPalette(c("white","green", "yellow", "red", "black"))(11), na.value= "white", name="Proportion of merged reads") + theme_bw() +
xlab("Match Status") +
ylab("Experiment/Sample ID") +
theme(legend.position="top",
legend.key.width= unit(0.5, 'in'),
axis.text.x = element_text(angle = 45, hjust=1)) +
scale_x_discrete(labels = gsub("_", " ", match_order))
file_list_unusuable = barcodes_list$sample_id[!barcodes_list$sample_id %in% missing$Sample_IDs]
file_list_unusuable = file_list_unusuable[!file_list_unusuable %in% unique(m_sample_status_melted$sample_id)]
file_list_unusuable = data.frame(Sample_IDs = file_list_unusuable)
gt(file_list_unusuable) |>
tab_header(md("**List of unusable files**"))
plotabs
plotper
###################################
###MATCH MATRIX BETWEEN BARCODES###
###################################
m_sample_status = table(df[,c("forward_barcodes", "reverse_barcodes")])
m_sample_status_melted = melt(m_sample_status, id.vars=c("forward_barcodes", "reverse_barcodes"))
m_sample_status_p = round(m_sample_status/rowSums(m_sample_status), 2)
m_sample_status_p_melted = melt(m_sample_status_p, id.vars=c("forward_barcodes", "reverse_barcodes"))
m_sample_status_melted <- m_sample_status_melted[m_sample_status_melted$forward_barcodes != "NULL" & m_sample_status_melted$reverse_barcodes != "NULL",]
m_sample_status_p_melted <- m_sample_status_p_melted[m_sample_status_p_melted$forward_barcodes != "NULL" & m_sample_status_p_melted$reverse_barcodes != "NULL",]
m_sample_status_melted = m_sample_status_melted[order(-m_sample_status_melted$value), ]
m_sample_status_melted$forward_barcodes <- factor(m_sample_status_melted$forward_barcodes, levels = unique(m_sample_status_melted$forward_barcodes))
m_sample_status_melted$reverse_barcodes <- factor(m_sample_status_melted$reverse_barcodes, levels = rev(unique(m_sample_status_melted$reverse_barcodes)))
m_sample_status_p_melted = m_sample_status_p_melted[order(-m_sample_status_p_melted$value), ]
m_sample_status_p_melted$forward_barcodes <- factor(m_sample_status_p_melted$forward_barcodes, levels = unique(m_sample_status_p_melted$forward_barcodes))
m_sample_status_p_melted$reverse_barcodes <- factor(m_sample_status_p_melted$reverse_barcodes, levels = rev(unique(m_sample_status_p_melted$reverse_barcodes)))
plotabs = ggplot(m_sample_status_melted, aes(forward_barcodes, reverse_barcodes)) +
geom_tile(aes(fill = value)) +
scale_fill_viridis() + theme_bw() +
guides(fill = guide_colourbar(title = "Match counts")) +
xlab("Forward Barcode") +
ylab("Reverse Barcode") +
theme(legend.position="top",
legend.key.width= unit(0.5, 'in'),
axis.text.x = element_text(angle = 45, hjust=1))
plotper = ggplot(m_sample_status_p_melted, aes(forward_barcodes, reverse_barcodes)) +
geom_tile(aes(fill = value)) +
scale_fill_viridis(option = "inferno") + theme_bw() +
guides(fill = guide_colourbar(title = "Match proportion against forward barcode")) +
xlab("Forward Barcode") +
ylab("Reverse Barcode") +
theme(legend.position="top",
legend.key.width= unit(0.5, 'in'),
axis.text.x = element_text(angle = 45, hjust=1))
plotabs
plotper
m_sample_status = table(df[,c("forward_barcodes", "forward_distances")])
m_sample_status_p = m_sample_status/rowSums(m_sample_status)
m_sample_status_p_melted = melt(m_sample_status_p, id.vars=c("forward_barcodes", "forward_distances"))
m_sample_status_p_melted = m_sample_status_p_melted[-which(m_sample_status_p_melted == 'NULL'),]
m_sample_status_p_melted_reshaped <- reshape(m_sample_status_p_melted, direction = "wide", idvar = "forward_barcodes", timevar = "forward_distances")
if (!'value.0' %in% colnames(m_sample_status_p_melted_reshaped)){
m_sample_status_p_melted_reshaped$value.0 = rep(0,nrow(m_sample_status_p_melted_reshaped))
}
if (!'value.1' %in% colnames(m_sample_status_p_melted_reshaped)){
m_sample_status_p_melted_reshaped$value.1 = rep(0,nrow(m_sample_status_p_melted_reshaped))
}
if (!'value.2' %in% colnames(m_sample_status_p_melted_reshaped)){
m_sample_status_p_melted_reshaped$value.2 = rep(0,nrow(m_sample_status_p_melted_reshaped))
}
m_sample_status_p_melted_reshaped = m_sample_status_p_melted_reshaped[, c("forward_barcodes",
"value.0",
"value.1",
"value.2")]
m_sample_status_p_melted_reshaped = m_sample_status_p_melted_reshaped[which(m_sample_status_p_melted_reshaped$forward_barcode != 'NULL'),]
colnames(m_sample_status_p_melted_reshaped) = c("Forward Barcode", "0", "1", "2")
gt(m_sample_status_p_melted_reshaped) |>
tab_header(md("**Hamming distance for forward barcodes**"))
m_sample_status = table(df[,c("reverse_barcodes", "reverse_distances")])
m_sample_status_p = m_sample_status/rowSums(m_sample_status)
m_sample_status_p_melted = melt(m_sample_status_p, id.vars=c("reverse_barcodes", "reverse_distances"))
m_sample_status_p_melted = m_sample_status_p_melted[-which(m_sample_status_p_melted == 'NULL'),]
m_sample_status_p_melted_reshaped <- reshape(m_sample_status_p_melted, direction = "wide", idvar = "reverse_barcodes", timevar = "reverse_distances")
if (!'value.0' %in% colnames(m_sample_status_p_melted_reshaped)){
m_sample_status_p_melted_reshaped$value.0 = rep(0,nrow(m_sample_status_p_melted_reshaped))
}
if (!'value.1' %in% colnames(m_sample_status_p_melted_reshaped)){
m_sample_status_p_melted_reshaped$value.1 = rep(0,nrow(m_sample_status_p_melted_reshaped))
}
if (!'value.2' %in% colnames(m_sample_status_p_melted_reshaped)){
m_sample_status_p_melted_reshaped$value.2 = rep(0,nrow(m_sample_status_p_melted_reshaped))
}
m_sample_status_p_melted_reshaped = m_sample_status_p_melted_reshaped[, c("reverse_barcodes",
"value.0",
"value.1",
"value.2")]
m_sample_status_p_melted_reshaped = m_sample_status_p_melted_reshaped[which(m_sample_status_p_melted_reshaped$reverse_barcodes != 'NULL'),]
colnames(m_sample_status_p_melted_reshaped) = c("Reverse Barcode", "0", "1", "2")
gt(m_sample_status_p_melted_reshaped) |>
tab_header(md("**Hamming distance for reverse barcodes**"))
###################################
########   FLAG ALGORITHM       ###
###################################
#DISAGGREGATED REPORT
missmatch_df = df
missmatch_df$barcode_pair = paste0(missmatch_df$forward_barcode, "/", missmatch_df$reverse_barcode)
m_sample_status = table(missmatch_df[,c("sample_id", "barcode_pair")])
m_sample_status_p = round(m_sample_status/rowSums(m_sample_status), 10)
m_sample_status_p_melted = melt(m_sample_status_p, id.vars=c("sample_id", "barcode_pair"))
m_sample_status_p_melted_reshaped = as.data.frame.matrix(xtabs(value ~ sample_id + barcode_pair, data = m_sample_status_p_melted))
m_sample_status_p_melted_reshaped$sample_id = rownames(m_sample_status_p_melted_reshaped)
m_sample_status_p_melted_reshaped = m_sample_status_p_melted_reshaped[match(samples_order, m_sample_status_p_melted_reshaped$sample_id),]
productivity = productivity[match(rownames(m_sample_status_p_melted_reshaped), productivity$Sample_Id),]
m_sample_status_p_melted_reshaped$Well_Productivity = productivity$Well_Productivity
m_sample_status_p_melted_reshaped$Productivity_Flag = m_sample_status_p_melted_reshaped$Well_Productivity < minreads_threshold
#Adjust table to include samples with no reads
rows = rownames(m_sample_status_p_melted_reshaped)
no_mergers = samples_order[!rows %in% samples_order]
rows[grep('^NA', rows)] = no_mergers
rownames(m_sample_status_p_melted_reshaped) = rows
#Fill the threshold and wrong barcode combinations flags
Below_Threshold_Flag = vector()
Wrong_Barcode_Comb_Flag = vector()
for (sample in rownames(m_sample_status_p_melted_reshaped)) {
if (!sample %in% no_mergers) {
tmp = m_sample_status_p_melted_reshaped[sample,
!colnames(m_sample_status_p_melted_reshaped) %in% c("sample_id", "Productivity_Flag", "Well_Productivity")]
abs_values <- sapply(tmp, function(x) abs(x))
column_with_max_abs <- names(tmp)[which.max(abs_values)]
max_freq_barcodes = unlist(barcodes_list[barcodes_list$sample_id == sample, c("Forward", "Reverse")])
names(max_freq_barcodes) = NULL
below_thres = tmp[which.max(abs_values)] < 0.5
are_equal = !identical(strsplit(column_with_max_abs, "/")[[1]], max_freq_barcodes)
Below_Threshold_Flag = c(Below_Threshold_Flag, below_thres)
Wrong_Barcode_Comb_Flag = c(Wrong_Barcode_Comb_Flag, are_equal)
}else{
Below_Threshold_Flag = c(Below_Threshold_Flag, NA)
Wrong_Barcode_Comb_Flag = c(Wrong_Barcode_Comb_Flag, NA)
}
}
m_sample_status_p_melted_reshaped$Below_Threshold_Flag = Below_Threshold_Flag
m_sample_status_p_melted_reshaped$Wrong_Barcode_Comb_Flag = Wrong_Barcode_Comb_Flag
m_sample_status_p_melted_reshaped$Flagged_well = m_sample_status_p_melted_reshaped$Productivity_Flag |
m_sample_status_p_melted_reshaped$Wrong_Barcode_Comb_Flag
m_sample_status_p_melted_reshaped = m_sample_status_p_melted_reshaped[,
!colnames(m_sample_status_p_melted_reshaped) %in% c("sample_id")]
m_sample_status_p_melted_reshaped$Flagged_well[is.na(m_sample_status_p_melted_reshaped$Flagged_well)] = "Missing Sample Data"
write.table(m_sample_status_p_melted_reshaped,
file=file.path(out_dir, "barcodes_report_bbmerge.tsv"),
quote = FALSE,
sep = "\t",
row.names = TRUE,
col.names = TRUE)
if (!require("webshot2")) {
install.packages("webshot2", repos="http://cran.rstudio.com/")
library("webshot2")
}
if (!require("magrittr")) {
install.packages("magrittr", repos="http://cran.rstudio.com/")
library("magrittr")
}
if (!require("dplyr")) {
install.packages("dplyr", repos="http://cran.rstudio.com/")
library("dplyr")
}
if (!require("stringr")) {
install.packages("stringr", repos="http://cran.rstudio.com/")
library("stringr")
}
if (!require("gt")) {
install.packages("gt", repos="http://cran.rstudio.com/")
library("gt")
}
if (!require("gridExtra")) {
install.packages("gridExtra", repos="http://cran.rstudio.com/")
library("gridExtra")
}
if (!require("grid")) {
install.packages("grid", repos="http://cran.rstudio.com/")
library("grid")
}
#reading in source files
barcode_matches<- read.csv(path_to_flist)
data<- m_sample_status_p_melted_reshaped
#creating the 96-well map and matching it to sample name
numbers<- 1:12
letters1<- LETTERS[1:8]
numbers_letters<- paste(rep(letters1, each = length(numbers)), numbers, sep = "")
barcode_matches$Well<- numbers_letters
barcode_matches<- barcode_matches %>%
dplyr::mutate(BarcodePair=paste0(Forward,"/",Reverse)) %>%
dplyr::mutate(Row=substr(Well, 1, 1)) %>%
dplyr::mutate(Column=substr(Well,2,nchar(Well)))
barcode_pairs<- barcode_matches$BarcodePair
data <- tibble::rownames_to_column(data, "samples")
colnames(data)[colnames(data) == "samples"] <- "sample_id"
missing_wells = barcode_matches$sample_id[which(barcode_matches$BarcodePair == 'NULL.NULL')]
contamination.report<-function(Name){
#finding the expected barcode pair for a sample
expectedpairframe<- barcode_matches %>% dplyr::filter(sample_id==Name)
expectedpair<- expectedpairframe[1,5]
samplewell<- barcode_matches$Well[barcode_matches$sample_id==Name]
#filtering and transforming the data to get a dataframe with the barcode and percentage of each barcode pair that appeared >0 in the data set for a single sample
a<- data %>% dplyr::filter(sample_id==Name)
b<-a %>% dplyr::select(-c(sample_id,Productivity_Flag,Below_Threshold_Flag,Wrong_Barcode_Comb_Flag,Flagged_well,Well_Productivity))#rewrite to ignore based on name of column
#Some of the samples have missing data/didn't work. This code subsets those samples and creates a special table for them.
if(is.na(b[1,1])){
missingdatasamples<-data.frame(ErrorMessage="Data Missing From this Sample")
g<-(missingdatasamples |> gt()|>
tab_header(
title =paste("SampleName:",Name),
subtitle = paste("SampleWell:",samplewell)))
}else{
#transforming the table for each sample to only include barcodes that show up in the merged table - if the expected pair does not show up, it is added in later
c<-t(b)
d<-as.data.frame(c)
e<- tibble::rownames_to_column(d, "BarcodePair")
f<- e %>% filter(V1>0)
#to deal with barcodes that have NULL make a table that has the barcode pair and a column for each forward and reverse primer
g<- f %>%
dplyr::select(BarcodePair) %>%
dplyr::mutate(Forward=str_split(BarcodePair, "/") %>% sapply(`[`, 1)) %>%
dplyr::mutate(Reverse=str_split(BarcodePair, "/") %>% sapply(`[`, 2))
# since there are six types of barcode origins (expected, contamination,forward-null, reverse-null,expected null-null and non expected null-null)
# separate each six cases to write each barcode origin. Combine the tables later.
forwardnull<- g %>%
filter(Forward=="NULL"&Reverse!="NULL") %>%
left_join(barcode_matches %>%
dplyr::select(Reverse,Row),by="Reverse") %>%
unique() %>%
dplyr::mutate(BarcodeOrigin=paste("Reverse barcode from Row",Row)) %>%
dplyr::select(BarcodePair,BarcodeOrigin)
reversenull<- g %>%
filter(Reverse=="NULL"&Forward!="NULL")%>%
left_join(barcode_matches %>%
dplyr::select(Forward,Column),by="Forward") %>%
unique() %>%
dplyr::mutate(BarcodeOrigin=paste("Forward barcode from Column",Column)) %>%
dplyr::select(BarcodePair,BarcodeOrigin)
nullnull.not.expected<- g %>%
filter(Reverse=="NULL"&Forward=="NULL"&expectedpair!="NULL/NULL") %>%
dplyr::mutate(BarcodeOrigin="NULL-NULL not expected for this sample") %>%
dplyr::select(BarcodePair,BarcodeOrigin)
nullnull.expected<- g %>%
filter(Reverse=="NULL"&Forward=="NULL"&expectedpair=="NULL/NULL") %>%
dplyr::mutate(BarcodeOrigin="NULL-NULL expected for this sample") %>%
dplyr::select(BarcodePair,BarcodeOrigin)
mismatch<- g %>%
dplyr::filter(Forward!="NULL"&Reverse!="NULL") %>%
dplyr::filter(BarcodePair!=expectedpair & BarcodePair %in% barcode_pairs) %>%
dplyr::left_join(barcode_matches
%>% dplyr::select(BarcodePair,Well),by="BarcodePair") %>%
dplyr::mutate(BarcodeOrigin=paste("Contamination from Well",Well)) %>%
dplyr::select(BarcodePair,BarcodeOrigin)
match<- g %>%
dplyr::filter(Forward!="NULL"&Reverse!="NULL") %>%
dplyr::filter(BarcodePair==expectedpair) %>%
dplyr::left_join(barcode_matches
%>% dplyr::select(BarcodePair,Well),by="BarcodePair") %>%
dplyr::mutate(BarcodeOrigin="Expected Barcode for this Sample") %>%
dplyr::select(BarcodePair,BarcodeOrigin)
expected<- match %>% rbind(nullnull.expected)
origin<- forwardnull %>% rbind(reversenull) %>% rbind(mismatch) %>% rbind(match) %>% rbind(nullnull.expected) %>% rbind(nullnull.not.expected)
# combining barcode pair and percentage with the barcode
message<- f %>% dplyr::left_join(origin,by="BarcodePair")
#Be mindful of the case where the expected barcodes don't show up with reads in a sample.
#Test for that by seeing if the expected dataframe has a row or not, if there is no row it means that the expected barcode pair did not show up.
#In that case I add a line with the barcode pair, its percentage (0) and saying this is the expected barcode pair from the sample.
if (nrow(expected)>0){
message<-message
}
else{
missingbarcode<-e %>% dplyr::filter(BarcodePair==expectedpair) %>% dplyr::mutate(BarcodeOrigin="Expected Barcode Pair from the Sample")
message<- message %>% rbind(missingbarcode)
}
# Below I am changing the titles and changing the . for an _ in thee barcode pair
#message<- message %>% rename("BarcodePair" = "Observed Barcode Pair",
#                             "V1" = "Fraction of Mergers",
#                             "BarcodeOrigin" = "Origin of Barcode Pair")
names(message) <- c("BarcodePair" = "Observed Barcode Pair",
"V1" = "Fraction of Mergers",
"BarcodeOrigin" = "Origin of Barcode Pair")
#message$`Observed Barcode Pair`<-gsub("\\."," - ", message$`Observed Barcode Pair`)
#creating a gt table with the sample name and well in a title
g<-(message |> gt()|>
tab_header(
title =paste("SampleName:",Name),
subtitle=paste("SampleWell:",samplewell)))
}
}
for (sample in barcode_matches$sample_id) {
well = barcode_matches$Well[barcode_matches$sample_id == sample]
outfile = file.path(out_dir, paste0(sample, "_", well, ".html"))
writeLines(as.character(gt:::as.tags.gt_tbl(contamination.report(sample))), outfile)
}
set.seed(123)
if (!require("ggplate")) {
install.packages("ggplate", repos="http://cran.rstudio.com/")
library("ggplate")
}
if (!require("pals")) {
install.packages("pals", repos="http://cran.rstudio.com/")
library("pals")
}
if (!require("devtools")) {
install.packages("devtools", repos="http://cran.rstudio.com/")
library("devtools")
}
if (!require("ggplot2bdc")) {
devtools::install_github("briandconnelly/ggplot2bdc")
library("ggplot2bdc")
}
if (!require("tidyverse")) {
install.packages("tidyverse", repos="http://cran.rstudio.com/")
library("tidyverse")
}
if (!require("grid")) {
install.packages("grid", repos="http://cran.rstudio.com/")
library("grid")
}
if (!require("gridExtra")) {
install.packages("gridExtra", repos="http://cran.rstudio.com/")
library("gridExtra")
}
if (!require("RColorBrewer")) {
install.packages("RColorBrewer", repos="http://cran.rstudio.com/")
library("RColorBrewer")
}
if (!require("colorspace")) {
install.packages("colorspace", repos="http://cran.rstudio.com/")
library("colorspace")
}
if (!require("pals")) {
install.packages("pals", repos="http://cran.rstudio.com/")
library("pals")
}
generate_vector <- function(letters, numbers) {
vector <- c()
for (letter in letters) {
for (number in numbers) {
element <- paste0(letter, number)
vector <- c(vector, element)
}
}
return(vector)
}
split_vector <- function(letters, numbers) {
vector <- generate_vector(letters, numbers)
split_letters <- as.numeric(substr(vector, 1, 1))
split_numbers <- as.numeric(substr(vector, 2, nchar(vector)))
return(list(letters = split_letters, numbers = split_numbers))
}
v = 8:1
h = 1:12
data$well = generate_vector(v, h)
result <- split_vector(v, h)
letters_vector <- result$letters
numbers_vector <- result$numbers
data$v = letters_vector
data$h = numbers_vector
vertical_tubes = rev(c("A", "B", "C", "D", "E", "F", "G", "H"))
horizontal_tubes = c(seq(1,12,1))
barcodes = sample(turbo(12))
#Replacing NA's with "Missing sample Data", except for Negative Controls, which are expected to have no reads
df<- data
df$Wrong_Barcode_Comb_Flag<-as.character(df$Wrong_Barcode_Comb_Flag)
df$Wrong_Barcode_Comb_Flag <- ifelse(is.na(df$Wrong_Barcode_Comb_Flag) & grepl("Negative",df$sample_id),
"FALSE",
df$Wrong_Barcode_Comb_Flag)
df$Wrong_Barcode_Comb_Flag <- df$Wrong_Barcode_Comb_Flag %>%
replace_na('Missing Sample Data')
df$Productivity_Flag <- as.character(df$Productivity_Flag)
df$Productivity_Flag <-df$Productivity_Flag %>% replace_na('Missing Sample Data')
df$Productivity_Flag<- ifelse(grepl("Negative",df$sample_id),
"FALSE",
df$Productivity_Flag)
p = ggplot(data=df,
aes(x=h, y=v, color=Productivity_Flag, fill=Productivity_Flag)) +
geom_point(shape=21, size=16) +
scale_y_continuous(breaks=seq(1, 8), labels=vertical_tubes) +
scale_x_continuous(breaks=seq(1, 12), labels=horizontal_tubes, position = "top") +
scale_color_manual(name = "Low Read Count Flag: ",
values = rep("black", 3)) +
scale_fill_manual(name = "Low Read Count Flag: ",
values = c("green", "black", "red")) +
#labs(title="96-well plate combinatorial indexing") +
expand_limits(y = c(0.8,8.2)) +
theme(axis.title = element_blank(),
axis.text.x = element_text(face="bold", colour = barcodes),
axis.text.y = element_text(face="bold", colour = rev(barcodes[1:8])),
panel.grid.minor = element_line(colour = "transparent"),
panel.grid.major.x = element_line(colour = barcodes, linewidth = 1.5),
panel.grid.major.y = element_line(colour = rev(barcodes[1:8]), linewidth = 1.5),
panel.background = element_rect(fill = "darkgrey",
colour = "darkgrey",
linetype = "solid"),
panel.border = element_rect(colour = "black", fill=NA, size=2),
legend.key = element_rect(fill = "transparent"),
legend.position="bottom",
plot.title = element_text(size = 16, face = "bold"))
options(repr.plot.width = 12, repr.plot.height = 8)
p
p = ggplot(data=df,
aes(x=h, y=v, color=Wrong_Barcode_Comb_Flag, fill=Wrong_Barcode_Comb_Flag)) +
geom_point(shape=21, size=16) +
scale_y_continuous(breaks=seq(1, 8), labels=vertical_tubes) +
scale_x_continuous(breaks=seq(1, 12), labels=horizontal_tubes, position = "top") +
scale_color_manual(name = "Wrong Barcode Combination Flag: ",
values = rep("black", 3)) +
scale_fill_manual(name = "Wrong Barcode Combination Flag: ",
values = c("green",  "black","red")) +
#labs(title="96-well plate combinatorial indexing") +
expand_limits(y = c(0.8,8.2)) +
theme(axis.title = element_blank(),
axis.text.x = element_text(face="bold", colour = barcodes),
axis.text.y = element_text(face="bold", colour = rev(barcodes[1:8])),
panel.grid.minor = element_line(colour = "transparent"),
panel.grid.major.x = element_line(colour = barcodes, linewidth = 1.5),
panel.grid.major.y = element_line(colour = rev(barcodes[1:8]), linewidth = 1.5),
panel.background = element_rect(fill = "darkgrey",
colour = "darkgrey",
linetype = "solid"),
panel.border = element_rect(colour = "black", fill=NA, size=2),
legend.key = element_rect(fill = "transparent"),
legend.position="bottom",
plot.title = element_text(size = 16, face = "bold"))
options(repr.plot.width = 12, repr.plot.height = 8)
p = ggplot(data=df,
aes(x=h, y=v, color=Flagged_well, fill=Flagged_well)) +
geom_point(shape=21, size=16) +
scale_y_continuous(breaks=seq(1, 8), labels=vertical_tubes) +
scale_x_continuous(breaks=seq(1, 12), labels=horizontal_tubes, position = "top") +
scale_color_manual(name = "Wrong Barcode Combination Flag: ",
values = rep("black", 3)) +
scale_fill_manual(name = "Wrong Barcode Combination Flag: ",
values = c("green",  "black","red")) +
#labs(title="96-well plate combinatorial indexing") +
expand_limits(y = c(0.8,8.2)) +
theme(axis.title = element_blank(),
axis.text.x = element_text(face="bold", colour = barcodes),
axis.text.y = element_text(face="bold", colour = rev(barcodes[1:8])),
panel.grid.minor = element_line(colour = "transparent"),
panel.grid.major.x = element_line(colour = barcodes, linewidth = 1.5),
panel.grid.major.y = element_line(colour = rev(barcodes[1:8]), linewidth = 1.5),
panel.background = element_rect(fill = "darkgrey",
colour = "darkgrey",
linetype = "solid"),
panel.border = element_rect(colour = "black", fill=NA, size=2),
legend.key = element_rect(fill = "transparent"),
legend.position="bottom",
plot.title = element_text(size = 16, face = "bold"))
options(repr.plot.width = 12, repr.plot.height = 8)
library(shiny); runApp('~/Desktop/Packaged_RShinyapp/Rshinyapp_Final.R')
if (!require("ggplot2")) {
install.packages("ggplot2", repos="http://cran.rstudio.com/")
library("ggplot2")
}
if (!require("viridis")) {
install.packages("viridis", repos="http://cran.rstudio.com/")
library("viridis")
}
if (!require("reshape")) {
install.packages("reshape", repos="http://cran.rstudio.com/")
library("reshape")
}
if (!require("gridExtra")) {
install.packages("gridExtra", repos="http://cran.rstudio.com/")
library("gridExtra")
}
if (!require("knitr")) {
install.packages("knitr", repos="http://cran.rstudio.com/")
library("knitr")
}
if (!require("gt")) {
install.packages("gt", repos="http://cran.rstudio.com/")
library("gt")
}
if (!require("ggplot2")) {
install.packages("ggplot2", repos="http://cran.rstudio.com/")
library("ggplot2")
}
if (!require("viridis")) {
install.packages("viridis", repos="http://cran.rstudio.com/")
library("viridis")
}
if (!require("reshape")) {
install.packages("reshape", repos="http://cran.rstudio.com/")
library("reshape")
}
if (!require("gridExtra")) {
install.packages("gridExtra", repos="http://cran.rstudio.com/")
library("gridExtra")
}
if (!require("knitr")) {
install.packages("knitr", repos="http://cran.rstudio.com/")
library("knitr")
}
if (!require("gt")) {
install.packages("gt", repos="http://cran.rstudio.com/")
library("gt")
}
data_dir = "/Users/jar4142/Desktop/Plate_2_Results/Merge"
out_dir = "/Users/jar4142/Desktop/Plate_2_Results/Report/"
path_to_flist = "/Users/jar4142/Desktop/Data_Repository_AmpSeq/SIMPLseq_CI/barcodes_matches_2.csv"
minreads_threshold = "1000"
contamination_threshold = "0.5"
missing_files = "/Users/jar4142/Desktop/Plate_2_Results/missing_files.tsv"
if (!require("ggplot2")) {
install.packages("ggplot2", repos="http://cran.rstudio.com/")
library("ggplot2")
}
if (!require("viridis")) {
install.packages("viridis", repos="http://cran.rstudio.com/")
library("viridis")
}
